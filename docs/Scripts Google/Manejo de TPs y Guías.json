{"files":[{"id":"ed4597aa-c6da-4865-9dbb-bd630ffaa2e3","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/Argentina/Buenos_Aires\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": [\n      {\n        \"userSymbol\": \"Drive\",\n        \"version\": \"v3\",\n        \"serviceId\": \"drive\"\n      }\n    ]\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\",\n  \"webapp\": {\n    \"executeAs\": \"USER_DEPLOYING\",\n    \"access\": \"ANYONE_ANONYMOUS\"\n  }\n}"},{"id":"4053e0ae-f4cd-44de-82c7-8cf58dea70ab","name":"Code","type":"server_js","source":"/**\n * Web App unificado:\n *\n * 1) LECTURA DE ARCHIVO (igual que tu script actual de TPs/Guías)\n *    GET .../exec?id\u003d\u003cFILE_ID\u003e\u0026type\u003d(json|tsv|csv)\n *    → responde el ARRAY de objetos (sin envoltorio)  [BACKWARD COMPATIBLE]\n *\n * 2) LISTADO DE CARPETA (para Clases) - **RECURSIVO**\n *    GET .../exec?folderId\u003d\u003cFOLDER_ID\u003e[\u0026depth\u003d5]\n *    → responde { ok:true, folderId:\"...\", folderName:\"...\", files:[ {...}, ... ] }\n *       donde cada elemento trae: { id, name, path, kind, webViewLink, previewPdf, exportPdf, downloadUrl }\n *\n * NOTA: Si vienen ambos parámetros, prioriza folderId.\n */\n\nconst DEFAULT_FILE_ID \u003d \u00271uWoOFG4sKfvmX_RxcK8z0Mhrwn9rpmba\u0027; // tu JSON maestro\n\nfunction doGet(e) {\n  try {\n    var folderId \u003d e \u0026\u0026 e.parameter \u0026\u0026 e.parameter.folderId;\n    if (folderId) {\n      var depth \u003d parseInt((e.parameter.depth || \u0027\u0027), 10);\n      if (!(depth \u003e\u003d 0)) depth \u003d 5; // profundidad por defecto\n      var out \u003d listFolderRecursive_(folderId, depth);\n      return json_({ ok:true, folderId: folderId, folderName: out.folderName, files: out.files });\n    }\n\n    // MODO ARCHIVO (igual que antes)\n    var id   \u003d (e \u0026\u0026 e.parameter \u0026\u0026 e.parameter.id)   || DEFAULT_FILE_ID;\n    var type \u003d (e \u0026\u0026 e.parameter \u0026\u0026 e.parameter.type) || \u0027\u0027; // \u0027json\u0027 | \u0027tsv\u0027 | \u0027csv\u0027 | \u0027\u0027\n\n    var file \u003d DriveApp.getFileById(id);\n    var name \u003d file.getName();\n    var text \u003d file.getBlob().getDataAsString(\u0027UTF-8\u0027);\n\n    var detected \u003d type || detectTypeByName_(name);\n    var data \u003d parseByType_(text, detected); // -\u003e Array\u003cObject\u003e\n    return json_(data);\n\n  } catch (err) {\n    if (e \u0026\u0026 e.parameter \u0026\u0026 e.parameter.folderId) {\n      return json_({ ok:false, error:String(err) });\n    }\n    return json_({ error:String(err) });\n  }\n}\n\n/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LISTADO RECURSIVO \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */\n\nfunction listFolderRecursive_(rootFolderId, maxDepth) {\n  var root \u003d DriveApp.getFolderById(rootFolderId);\n  var files \u003d [];\n  walk_(root, \u0027\u0027, 0, maxDepth, files);\n  // ordenar por path + nombre\n  files.sort(function(a,b){\n    var pa \u003d (a.path || \u0027\u0027) + \u0027/\u0027 + a.name;\n    var pb \u003d (b.path || \u0027\u0027) + \u0027/\u0027 + b.name;\n    return pa.localeCompare(pb, \u0027es\u0027);\n  });\n  return { folderName: root.getName(), files: files };\n}\n\nfunction walk_(folder, path, depth, maxDepth, out) {\n  // Archivos en este folder\n  var it \u003d folder.getFiles();\n  while (it.hasNext()) {\n    var f \u003d it.next();\n    var id   \u003d f.getId();\n    var name \u003d f.getName();\n    var mime \u003d f.getMimeType();\n    var kind \u003d classifyMime_(mime, name);\n\n    var previewPdf \u003d (kind \u003d\u003d\u003d \u0027pdf\u0027) ? (\"https://drive.google.com/file/d/\" + id + \"/preview\") : null;\n\n    var exportPdf \u003d null;\n    if (kind \u003d\u003d\u003d \u0027gdoc\u0027)    exportPdf \u003d \"https://docs.google.com/document/d/\"    + id + \"/export?format\u003dpdf\";\n    if (kind \u003d\u003d\u003d \u0027gslides\u0027) exportPdf \u003d \"https://docs.google.com/presentation/d/\"+ id + \"/export/pdf\";\n    if (kind \u003d\u003d\u003d \u0027gsheets\u0027) exportPdf \u003d \"https://docs.google.com/spreadsheets/d/\"+ id + \"/export?format\u003dpdf\";\n\n    out.push({\n      id: id,\n      name: name,\n      path: path, // ruta relativa desde la carpeta raíz\n      mimeType: mime,\n      kind: kind,\n      webViewLink: f.getUrl(),\n      previewPdf: previewPdf,\n      exportPdf: exportPdf,\n      downloadUrl: \"https://drive.google.com/uc?export\u003ddownload\u0026id\u003d\" + id\n    });\n  }\n\n  // Subcarpetas\n  if (depth \u003e\u003d maxDepth) return;\n  var sub \u003d folder.getFolders();\n  while (sub.hasNext()) {\n    var sf \u003d sub.next();\n    var subPath \u003d path ? (path + \"/\" + sf.getName()) : sf.getName();\n    walk_(sf, subPath, depth + 1, maxDepth, out);\n  }\n}\n\n/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UTILIDADES EXISTENTES \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */\n\nfunction classifyMime_(mime, name) {\n  name \u003d (name || \u0027\u0027).toLowerCase();\n  if (mime \u003d\u003d\u003d MimeType.PDF || name.endsWith(\u0027.pdf\u0027)) return \u0027pdf\u0027;\n  if (mime \u003d\u003d\u003d MimeType.GOOGLE_DOCS)   return \u0027gdoc\u0027;\n  if (mime \u003d\u003d\u003d MimeType.GOOGLE_SHEETS) return \u0027gsheets\u0027;\n  if (mime \u003d\u003d\u003d MimeType.GOOGLE_SLIDES) return \u0027gslides\u0027;\n  if (/^image\\//.test(mime)) return \u0027image\u0027;\n  if (/^audio\\//.test(mime)) return \u0027audio\u0027;\n  if (/^video\\//.test(mime)) return \u0027video\u0027;\n  if (/\\.(zip|rar|7z|tar|gz|bz2)$/.test(name)) return \u0027archive\u0027;\n  if (/\\.(asc|cir|net|sp|sch|brd|kicad_pcb|kicad_sch|ino|c|cpp|h|py|m|ipynb|js|ts|md|tex)$/.test(name)) return \u0027code\u0027;\n  return \u0027other\u0027;\n}\n\nfunction detectTypeByName_(name) {\n  var n \u003d (name || \u0027\u0027).toLowerCase().trim();\n  if (n.endsWith(\u0027.json\u0027)) return \u0027json\u0027;\n  if (n.endsWith(\u0027.tsv\u0027) || n.endsWith(\u0027.txt\u0027)) return \u0027tsv\u0027;\n  if (n.endsWith(\u0027.csv\u0027)) return \u0027csv\u0027;\n  return \u0027json\u0027;\n}\n\nfunction parseByType_(text, type) {\n  var t \u003d (type || \u0027\u0027).toLowerCase().trim();\n  if (t \u003d\u003d\u003d \u0027tsv\u0027) return parseTSV_(text);\n  if (t \u003d\u003d\u003d \u0027csv\u0027) return parseCSV_(text);\n  var data \u003d JSON.parse(text);\n  if (Array.isArray(data)) return data;\n  if (data \u0026\u0026 Array.isArray(data.rows)) return data.rows;\n  return [data];\n}\n\nfunction parseTSV_(txt) {\n  var out \u003d [];\n  var lines \u003d String(txt).split(/\\r?\\n/);\n  for (var i\u003d0; i\u003clines.length; i++) {\n    var raw \u003d lines[i]; if (!raw) continue;\n    var line \u003d raw.trim(); if (!line || line.startsWith(\u0027#\u0027)) continue;\n    var cols \u003d line.includes(\u0027\\t\u0027) ? line.split(\u0027\\t\u0027) : line.split(/\\s{2,}/);\n    while (cols.length \u003c 5) cols.push(\u0027\u0027);\n    var title \u003d (cols[0]||\u0027\u0027).trim();\n    var description \u003d (cols[1]||\u0027\u0027).trim();\n    var pdf_id \u003d (cols[2]||\u0027\u0027).trim();\n    var release \u003d (cols[3]||\u0027\u0027).trim();\n    var deadline \u003d (cols[4]||\u0027\u0027).trim();\n    out.push({ title, description, pdf_id, release, deadline });\n  }\n  return out;\n}\n\nfunction parseCSV_(txt) {\n  var out \u003d [];\n  var lines \u003d String(txt).split(/\\r?\\n/);\n  for (var i\u003d0; i\u003clines.length; i++) {\n    var raw \u003d lines[i]; if (!raw) continue;\n    var line \u003d raw.trim(); if (!line || line.startsWith(\u0027#\u0027)) continue;\n    var cols \u003d line.split(\u0027,\u0027).map(function(c){ return (c || \u0027\u0027).trim(); });\n    while (cols.length \u003c 5) cols.push(\u0027\u0027);\n    var title \u003d cols[0], description \u003d cols[1], pdf_id \u003d cols[2], release \u003d cols[3], deadline \u003d cols[4];\n    out.push({ title, description, pdf_id, release, deadline });\n  }\n  return out;\n}\n\nfunction json_(obj) {\n  return ContentService.createTextOutput(JSON.stringify(obj))\n                       .setMimeType(ContentService.MimeType.JSON);\n}\n"}]}