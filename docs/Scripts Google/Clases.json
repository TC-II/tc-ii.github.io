{"files":[{"id":"5f14436b-b9dc-4695-a3db-1d3aeff0833d","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/Argentina/Buenos_Aires\",\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": [\n      {\n        \"userSymbol\": \"Drive\",\n        \"serviceId\": \"drive\",\n        \"version\": \"v2\"\n      }\n    ]\n  },\n  \"webapp\": {\n    \"executeAs\": \"USER_DEPLOYING\",\n    \"access\": \"ANYONE_ANONYMOUS\"\n  }\n}"},{"id":"1d814956-8d39-479a-86a9-f546a521fd7f","name":"Code","type":"server_js","source":"/**\n * Web App que lee un archivo de Drive (JSON o TSV) y devuelve JSON limpio.\n * - GET .../exec?id\u003d\u003cFILE_ID\u003e\u0026type\u003d(json|tsv|csv)\n * - Si no pasás ?id\u003d, usa DEFAULT_FILE_ID (tu fechas.json).\n * - Si no pasás ?type\u003d, detecta por extensión (\".json\", \".tsv\", \".txt\", \".csv\").\n *\n * NOTA: GET simple funciona cross-origin. No hace falta CORS extra para fetch() sin credenciales.\n */\n\n// \u003d\u003d\u003d CONFIG \u003d\u003d\u003d\nconst DEFAULT_FILE_ID \u003d \u00271uWoOFG4sKfvmX_RxcK8z0Mhrwn9rpmba\u0027; // \u003c-- tu archivo en Drive (fechas.json)\n\n// \u003d\u003d\u003d ENTRYPOINT \u003d\u003d\u003d\nfunction doGet(e) {\n  try {\n    const id   \u003d (e \u0026\u0026 e.parameter \u0026\u0026 e.parameter.id)   || DEFAULT_FILE_ID;\n    const type \u003d (e \u0026\u0026 e.parameter \u0026\u0026 e.parameter.type) || \u0027\u0027; // \u0027json\u0027 | \u0027tsv\u0027 | \u0027csv\u0027 | \u0027\u0027\n\n    const file \u003d DriveApp.getFileById(id);\n    const name \u003d file.getName();\n    const blob \u003d file.getBlob();\n    const text \u003d blob.getDataAsString(\u0027UTF-8\u0027);\n\n    const detected \u003d type || detectTypeByName(name);\n    const data \u003d parseByType(text, detected); // -\u003e Array\u003cObject\u003e\n\n    // Respondemos como JSON (array de objetos)\n    return ContentService\n      .createTextOutput(JSON.stringify(data))\n      .setMimeType(ContentService.MimeType.JSON);\n\n  } catch (err) {\n    // Error JSON (útil para depurar desde el frontend)\n    return ContentService\n      .createTextOutput(JSON.stringify({ error: String(err) }))\n      .setMimeType(ContentService.MimeType.JSON);\n  }\n}\n\n// \u003d\u003d\u003d DETECCIÓN DE TIPO POR NOMBRE \u003d\u003d\u003d\nfunction detectTypeByName(name) {\n  const n \u003d (name || \u0027\u0027).toLowerCase().trim();\n  if (n.endsWith(\u0027.json\u0027)) return \u0027json\u0027;\n  if (n.endsWith(\u0027.tsv\u0027) || n.endsWith(\u0027.txt\u0027)) return \u0027tsv\u0027;\n  if (n.endsWith(\u0027.csv\u0027)) return \u0027csv\u0027;\n  // Por defecto asumimos JSON (más seguro)\n  return \u0027json\u0027;\n}\n\n// \u003d\u003d\u003d PARSE GENERAL \u003d\u003d\u003d\nfunction parseByType(text, type) {\n  const t \u003d (type || \u0027\u0027).toLowerCase().trim();\n  if (t \u003d\u003d\u003d \u0027tsv\u0027) return parseTSV(text);\n  if (t \u003d\u003d\u003d \u0027csv\u0027) return parseCSV(text);\n  // default: json\n  const data \u003d JSON.parse(text);\n  if (Array.isArray(data)) return data;\n  // Si fuera un objeto con campo \"rows\" o similar:\n  if (data \u0026\u0026 Array.isArray(data.rows)) return data.rows;\n  // En caso raro, lo envolvemos\n  return [data];\n}\n\n// \u003d\u003d\u003d PARSE TSV \u003d\u003d\u003d\n// Espera columnas: title  description  pdf_id  release(YYYY-MM-DD)  deadline(YYYY-MM-DD opcional)\nfunction parseTSV(txt) {\n  const out \u003d [];\n  const lines \u003d String(txt).split(/\\r?\\n/);\n  for (let raw of lines) {\n    if (!raw) continue;\n    const line \u003d raw.trim();\n    if (!line || line.startsWith(\u0027#\u0027)) continue;\n    const cols \u003d line.includes(\u0027\\t\u0027) ? line.split(\u0027\\t\u0027) : line.split(/\\s{2,}/);\n    while (cols.length \u003c 5) cols.push(\u0027\u0027);\n    const [title, description, pdf_id, release, deadline] \u003d cols.map(c \u003d\u003e (c || \u0027\u0027).trim());\n    out.push({ title, description, pdf_id, release, deadline });\n  }\n  return out;\n}\n\n// \u003d\u003d\u003d PARSE CSV (simple) \u003d\u003d\u003d\nfunction parseCSV(txt) {\n  const out \u003d [];\n  const lines \u003d String(txt).split(/\\r?\\n/);\n  for (let raw of lines) {\n    if (!raw) continue;\n    const line \u003d raw.trim();\n    if (!line || line.startsWith(\u0027#\u0027)) continue;\n    const cols \u003d line.split(\u0027,\u0027).map(c \u003d\u003e (c || \u0027\u0027).trim());\n    while (cols.length \u003c 5) cols.push(\u0027\u0027);\n    const [title, description, pdf_id, release, deadline] \u003d cols;\n    out.push({ title, description, pdf_id, release, deadline });\n  }\n  return out;\n}\n"}]}